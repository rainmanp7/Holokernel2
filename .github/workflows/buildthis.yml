 - name: Run QEMU Boot Test (Maximum Debug)
        run: |
          echo "=== STARTING QEMU DEBUG SESSION ==="
          echo "Starting QEMU with image: $IMAGE_NAME"
          echo "Timeout: $QEMU_TIMEOUT seconds"

          # Create QEMU monitor commands file
          cat > monitor_commands.txt << 'EOF'
          info registers
          info cpus
          info memory
          info block
          info status
          EOF

          echo "QEMU command that will be executed:"
          echo "timeout $QEMU_TIMEOUT qemu-system-i386 \\"
          echo "  -fda $IMAGE_NAME \\"
          echo "  -serial file:$SERIAL_LOG \\"
          echo "  -monitor file:$MONITOR_LOG \\"
          echo "  -d int,cpu,guest_errors,unimp,trace:* \\"
          echo "  -D $QEMU_LOG \\"
          echo "  -nographic \\"
          echo "  -machine pc \\"
          echo "  -cpu pentium \\"
          echo "  -m 64M \\"
          echo "  -no-reboot \\"
          echo "  -boot a"
          echo ""

          # Run QEMU with maximum debugging
          # Capture the exit code of the timeout command
          if timeout $QEMU_TIMEOUT qemu-system-i386 \
            -fda $IMAGE_NAME \
            -serial file:$SERIAL_LOG \
            -monitor file:$MONITOR_LOG \
            -d int,cpu,guest_errors,unimp \
            -D $QEMU_LOG \
            -nographic \
            -machine pc \
            -cpu pentium \
            -m 64M \
            -no-reboot \
            -boot a \
            2>&1 | tee qemu_stderr.log; then
            QEMU_EXIT_CODE=$?
          else
            QEMU_EXIT_CODE=$?
          fi

          if [ $QEMU_EXIT_CODE -ne 0 ]; then
            echo "❌ QEMU exited with an error (exit code: $QEMU_EXIT_CODE). Check qemu_stderr.log"
            exit 1 # Exit the step to prevent artifact upload if QEMU failed
          fi

          echo "QEMU execution completed."
          echo "========================="
        working-directory: ${{ github.workspace }} # Ensure files are created in the workspace

      - name: Upload Debug Artifacts
        if: always()
        run: |
          # Change directory to workspace to ensure correct file paths
          cd ${{ github.workspace }}

          # Check if either the serial log or QEMU log exists before proceeding
          if [ -f "$SERIAL_LOG" ] || [ -f "$QEMU_LOG" ]; then
            echo "Uploading debug artifacts..."
            # List files before uploading to confirm they exist
            ls -la

            # Proceed with artifact upload
            echo "IMAGE_NAME: $IMAGE_NAME"
            echo "SERIAL_LOG: $SERIAL_LOG"
            echo "QEMU_LOG: $QEMU_LOG"
            echo "MONITOR_LOG: $MONITOR_LOG"
            echo "qemu_stderr.log: qemu_stderr.log"
            echo "monitor_commands.txt: monitor_commands.txt"
            echo "packages.txt: packages.txt"
            echo "Finding *.bin files:"
            find . -name "*.bin" -print
            echo "Finding *.elf files:"
            find . -name "*.elf" -print
          else
            echo "❌ No log files found. Skipping artifact upload."
            exit 0
          fi
        uses: actions/upload-artifact@v4
        with:
          name: debug-boot-artifacts
          path: |
            ${{ github.workspace }}/$IMAGE_NAME
            ${{ github.workspace }}/$SERIAL_LOG
            ${{ github.workspace }}/$QEMU_LOG
            ${{ github.workspace }}/$MONITOR_LOG
            ${{ github.workspace }}/qemu_stderr.log
            ${{ github.workspace }}/monitor_commands.txt
            ${{ github.workspace }}/packages.txt
            ${{ github.workspace }}/*.bin
            ${{ github.workspace }}/*.elf
            ${{ github.workspace }}/Makefile
            ${{ github.workspace }}/boot.asm
            ${{ github.workspace }}/kernel_entry.asm
            ${{ github.workspace }}/holographic_kernel.c
            ${{ github.workspace }}/linker.ld
          if-no-files-found: warn
